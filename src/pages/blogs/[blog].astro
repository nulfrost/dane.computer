---
import BlogLayout from "@layouts/BlogLayout.astro";
import { render } from "astro:content";
import { getCollection, getEntry, type CollectionEntry } from "astro:content";

export const prerender = true;

export async function getStaticPaths() {
	const documents = await getCollection("documents");
	const blogs = await getCollection("blogs");

	// Combine both collections for static paths
	const allPosts = [
		...documents.map((document) => ({
			params: { blog: document.id },
			props: { collection: "documents" },
		})),
		...blogs.map((blog) => ({
			params: { blog: blog.id },
			props: { collection: "blogs" },
		})),
	];

	return allPosts;
}

// Try to get the entry from both collections
let entry: CollectionEntry<"documents"> | CollectionEntry<"blogs"> | undefined =
	await getEntry("documents", Astro.params.blog);

if (!entry) {
	entry = await getEntry("blogs", Astro.params.blog);
}

if (!entry) {
	return Astro.rewrite("/404");
}

const { Content } = await render(entry);
---

<script>
    const codeBlock = document.querySelectorAll("pre");
    const copyButton = document.createElement("button");
    copyButton.textContent = "Copy code to clipboard";
    codeBlock.forEach((block) => {
        block?.parentNode?.insertBefore(copyButton.cloneNode(true), block);
    });

    const copyButtons = document.querySelectorAll("button");

    copyButtons.forEach((button) => {
        button.addEventListener("click", (event) => {
            // @ts-ignore
            const code = event.target.nextElementSibling.textContent;
            setTimeout(() => {
                // @ts-ignore
                event.target.textContent = "Copied!";
                setTimeout(() => {
                    // @ts-ignore
                    event.target.textContent = "Copy code to clipboard";
                }, 2000);
            }, 0);
            navigator.clipboard.writeText(code);
        });
    });
</script>

<BlogLayout {...entry!.data}>
    <Content />
</BlogLayout>

<style is:global>
    code {
        position: relative;
        counter-reset: step;
        counter-increment: step 0;
    }

    code .line::before {
        content: counter(step);
        counter-increment: step;
        width: 1rem;
        margin-right: 1.5rem;
        display: inline-block;
        text-align: right;
        color: rgba(115, 138, 148, 0.2);
    }

    pre:hover .line::before {
        color: rgba(115, 138, 148, 0.5);
    }

    button {
        font-size: 0.8rem;
        text-align: right;
        width: 100%;
    }
</style>
